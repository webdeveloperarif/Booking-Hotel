!(function (t, e) {
  if ("function" == typeof define && define.amd)
    define(["moment", "jquery"], function (t, s) {
      return (
        s.fn || (s.fn = {}),
        "function" != typeof t &&
          t.hasOwnProperty("default") &&
          (t = t.default),
        e(t, s)
      );
    });
  else if ("object" == typeof module && module.exports) {
    var s = "undefined" != typeof window ? window.jQuery : void 0;
    s || (s = require("jquery")).fn || (s.fn = {});
    var a =
      "undefined" != typeof window && void 0 !== window.moment
        ? window.moment
        : require("moment");
    module.exports = e(a, s);
  } else t.daterangepicker = e(t.moment, t.jQuery);
})(this, function (t, e) {
  var s = function (s, a, i) {
    if (
      ((this.parentEl = "body"),
      (this.element = e(s)),
      (this.cs_start_date = t().startOf("day")),
      (this.cs_end_date = t().endOf("day")),
      (this.minDate = !1),
      (this.maxDate = !1),
      (this.maxSpan = !1),
      (this.autoApply = !1),
      (this.singleDatePicker = !1),
      (this.showDropdowns = !1),
      (this.minYear = t().subtract(100, "year").format("YYYY")),
      (this.maxYear = t().add(100, "year").format("YYYY")),
      (this.showWeekNumbers = !1),
      (this.showISOWeekNumbers = !1),
      (this.showCustomRangeLabel = !0),
      (this.timePicker = !1),
      (this.timePicker24Hour = !1),
      (this.timePickerIncrement = 1),
      (this.timePickerSeconds = !1),
      (this.linkedCalendars = !0),
      (this.autoUpdateInput = !0),
      (this.alwaysShowCalendars = !1),
      (this.ranges = {}),
      (this.opens = "right"),
      this.element.hasClass("pull-right") && (this.opens = "left"),
      (this.drops = "down"),
      this.element.hasClass("dropup") && (this.drops = "up"),
      (this.buttonClasses = "btn btn-sm"),
      (this.applyButtonClasses = "btn-primary"),
      (this.cancelButtonClasses = "btn-default"),
      (this.locale = {
        direction: "ltr",
        format: t.localeData().longDateFormat("L"),
        separator: " - ",
        applyLabel: "Apply",
        cancelLabel: "Cancel",
        weekLabel: "W",
        customRangeLabel: "Custom Range",
        daysOfWeek: t.weekdaysMin(),
        monthNames: t.monthsShort(),
        firstDay: t.localeData().firstDayOfWeek(),
      }),
      (this.callback = function () {}),
      (this.isShowing = !1),
      (this.leftCalendar = {}),
      (this.rightCalendar = {}),
      ("object" == typeof a && null !== a) || (a = {}),
      "string" == typeof (a = e.extend(this.element.data(), a)).template ||
        a.template instanceof e ||
        (a.template =
          '<div class="daterangepicker"><div class="ranges"></div><div class="drp-calendar left"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-calendar right"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-buttons"><span class="drp-selected"></span><button class="cancelBtn" type="button"></button><button class="applyBtn" disabled="disabled" type="button"></button> </div></div>'),
      (this.parentEl =
        a.parentEl && e(a.parentEl).length ? e(a.parentEl) : e(this.parentEl)),
      (this.container = e(a.template).appendTo(this.parentEl)),
      "object" == typeof a.locale &&
        ("string" == typeof a.locale.direction &&
          (this.locale.direction = a.locale.direction),
        "string" == typeof a.locale.format &&
          (this.locale.format = a.locale.format),
        "string" == typeof a.locale.separator &&
          (this.locale.separator = a.locale.separator),
        "object" == typeof a.locale.daysOfWeek &&
          (this.locale.daysOfWeek = a.locale.daysOfWeek.slice()),
        "object" == typeof a.locale.monthNames &&
          (this.locale.monthNames = a.locale.monthNames.slice()),
        "number" == typeof a.locale.firstDay &&
          (this.locale.firstDay = a.locale.firstDay),
        "string" == typeof a.locale.applyLabel &&
          (this.locale.applyLabel = a.locale.applyLabel),
        "string" == typeof a.locale.cancelLabel &&
          (this.locale.cancelLabel = a.locale.cancelLabel),
        "string" == typeof a.locale.weekLabel &&
          (this.locale.weekLabel = a.locale.weekLabel),
        "string" == typeof a.locale.customRangeLabel))
    ) {
      (m = document.createElement("textarea")).innerHTML =
        a.locale.customRangeLabel;
      var n = m.value;
      this.locale.customRangeLabel = n;
    }
    if (
      (this.container.addClass(this.locale.direction),
      "string" == typeof a.cs_start_date &&
        (this.cs_start_date = t(a.cs_start_date, this.locale.format)),
      "string" == typeof a.cs_end_date &&
        (this.cs_end_date = t(a.cs_end_date, this.locale.format)),
      "string" == typeof a.minDate &&
        (this.minDate = t(a.minDate, this.locale.format)),
      "string" == typeof a.maxDate &&
        (this.maxDate = t(a.maxDate, this.locale.format)),
      "object" == typeof a.cs_start_date &&
        (this.cs_start_date = t(a.cs_start_date)),
      "object" == typeof a.cs_end_date && (this.cs_end_date = t(a.cs_end_date)),
      "object" == typeof a.minDate && (this.minDate = t(a.minDate)),
      "object" == typeof a.maxDate && (this.maxDate = t(a.maxDate)),
      this.minDate &&
        this.cs_start_date.isBefore(this.minDate) &&
        (this.cs_start_date = this.minDate.clone()),
      this.maxDate &&
        this.cs_end_date.isAfter(this.maxDate) &&
        (this.cs_end_date = this.maxDate.clone()),
      "string" == typeof a.applyButtonClasses &&
        (this.applyButtonClasses = a.applyButtonClasses),
      "string" == typeof a.applyClass &&
        (this.applyButtonClasses = a.applyClass),
      "string" == typeof a.cancelButtonClasses &&
        (this.cancelButtonClasses = a.cancelButtonClasses),
      "string" == typeof a.cancelClass &&
        (this.cancelButtonClasses = a.cancelClass),
      "object" == typeof a.maxSpan && (this.maxSpan = a.maxSpan),
      "object" == typeof a.dateLimit && (this.maxSpan = a.dateLimit),
      "string" == typeof a.opens && (this.opens = a.opens),
      "string" == typeof a.drops && (this.drops = a.drops),
      "boolean" == typeof a.showWeekNumbers &&
        (this.showWeekNumbers = a.showWeekNumbers),
      "boolean" == typeof a.showISOWeekNumbers &&
        (this.showISOWeekNumbers = a.showISOWeekNumbers),
      "string" == typeof a.buttonClasses &&
        (this.buttonClasses = a.buttonClasses),
      "object" == typeof a.buttonClasses &&
        (this.buttonClasses = a.buttonClasses.join(" ")),
      "boolean" == typeof a.showDropdowns &&
        (this.showDropdowns = a.showDropdowns),
      "number" == typeof a.minYear && (this.minYear = a.minYear),
      "number" == typeof a.maxYear && (this.maxYear = a.maxYear),
      "boolean" == typeof a.showCustomRangeLabel &&
        (this.showCustomRangeLabel = a.showCustomRangeLabel),
      "boolean" == typeof a.singleDatePicker &&
        ((this.singleDatePicker = a.singleDatePicker),
        this.singleDatePicker &&
          (this.cs_end_date = this.cs_start_date.clone())),
      "boolean" == typeof a.timePicker && (this.timePicker = a.timePicker),
      "boolean" == typeof a.timePickerSeconds &&
        (this.timePickerSeconds = a.timePickerSeconds),
      "number" == typeof a.timePickerIncrement &&
        (this.timePickerIncrement = a.timePickerIncrement),
      "boolean" == typeof a.timePicker24Hour &&
        (this.timePicker24Hour = a.timePicker24Hour),
      "boolean" == typeof a.autoApply && (this.autoApply = a.autoApply),
      "boolean" == typeof a.autoUpdateInput &&
        (this.autoUpdateInput = a.autoUpdateInput),
      "boolean" == typeof a.linkedCalendars &&
        (this.linkedCalendars = a.linkedCalendars),
      "function" == typeof a.isInvalidDate &&
        (this.isInvalidDate = a.isInvalidDate),
      "function" == typeof a.isCustomDate &&
        (this.isCustomDate = a.isCustomDate),
      "boolean" == typeof a.alwaysShowCalendars &&
        (this.alwaysShowCalendars = a.alwaysShowCalendars),
      0 != this.locale.firstDay)
    )
      for (var r = this.locale.firstDay; r > 0; )
        this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()), r--;
    if (
      void 0 === a.cs_start_date &&
      void 0 === a.cs_end_date &&
      e(this.element).is(":text")
    ) {
      var o = e(this.element).val(),
        h = o.split(this.locale.separator);
      (l = c = null),
        2 == h.length
          ? ((l = t(h[0], this.locale.format)),
            (c = t(h[1], this.locale.format)))
          : this.singleDatePicker &&
            "" !== o &&
            ((l = t(o, this.locale.format)), (c = t(o, this.locale.format))),
        null !== l &&
          null !== c &&
          (this.setcs_start_date(l), this.setcs_end_date(c));
    }
    if ("object" == typeof a.ranges) {
      for (d in a.ranges) {
        (l =
          "string" == typeof a.ranges[d][0]
            ? t(a.ranges[d][0], this.locale.format)
            : t(a.ranges[d][0])),
          (c =
            "string" == typeof a.ranges[d][1]
              ? t(a.ranges[d][1], this.locale.format)
              : t(a.ranges[d][1])),
          this.minDate &&
            l.isBefore(this.minDate) &&
            (l = this.minDate.clone());
        var l,
          c,
          d,
          m,
          f = this.maxDate;
        this.maxSpan &&
          f &&
          l.clone().add(this.maxSpan).isAfter(f) &&
          (f = l.clone().add(this.maxSpan)),
          f && c.isAfter(f) && (c = f.clone()),
          (this.minDate &&
            c.isBefore(this.minDate, this.timepicker ? "minute" : "day")) ||
            (f && l.isAfter(f, this.timepicker ? "minute" : "day")) ||
            (((m = document.createElement("textarea")).innerHTML = d),
            (n = m.value),
            (this.ranges[n] = [l, c]));
      }
      var p = "<ul>";
      for (d in this.ranges)
        p += '<li data-range-key="' + d + '">' + d + "</li>";
      this.showCustomRangeLabel &&
        (p +=
          '<li data-range-key="' +
          this.locale.customRangeLabel +
          '">' +
          this.locale.customRangeLabel +
          "</li>"),
        (p += "</ul>"),
        this.container.find(".ranges").prepend(p);
    }
    "function" == typeof i && (this.callback = i),
      this.timePicker ||
        ((this.cs_start_date = this.cs_start_date.startOf("day")),
        (this.cs_end_date = this.cs_end_date.endOf("day")),
        this.container.find(".calendar-time").hide()),
      this.timePicker && this.autoApply && (this.autoApply = !1),
      this.autoApply && this.container.addClass("auto-apply"),
      "object" == typeof a.ranges && this.container.addClass("show-ranges"),
      this.singleDatePicker &&
        (this.container.addClass("single"),
        this.container.find(".drp-calendar.left").addClass("single"),
        this.container.find(".drp-calendar.left").show(),
        this.container.find(".drp-calendar.right").hide(),
        !this.timePicker &&
          this.autoApply &&
          this.container.addClass("auto-apply")),
      ((void 0 === a.ranges && !this.singleDatePicker) ||
        this.alwaysShowCalendars) &&
        this.container.addClass("show-calendar"),
      this.container.addClass("opens" + this.opens),
      this.container.find(".applyBtn, .cancelBtn").addClass(this.buttonClasses),
      this.applyButtonClasses.length &&
        this.container.find(".applyBtn").addClass(this.applyButtonClasses),
      this.cancelButtonClasses.length &&
        this.container.find(".cancelBtn").addClass(this.cancelButtonClasses),
      this.container.find(".applyBtn").html(this.locale.applyLabel),
      this.container.find(".cancelBtn").html(this.locale.cancelLabel),
      this.container
        .find(".drp-calendar")
        .on("click.daterangepicker", ".prev", e.proxy(this.clickPrev, this))
        .on("click.daterangepicker", ".next", e.proxy(this.clickNext, this))
        .on(
          "mousedown.daterangepicker",
          "td.available",
          e.proxy(this.clickDate, this)
        )
        .on(
          "mouseenter.daterangepicker",
          "td.available",
          e.proxy(this.hoverDate, this)
        )
        .on(
          "change.daterangepicker",
          "select.yearselect",
          e.proxy(this.monthOrYearChanged, this)
        )
        .on(
          "change.daterangepicker",
          "select.monthselect",
          e.proxy(this.monthOrYearChanged, this)
        )
        .on(
          "change.daterangepicker",
          "select.hourselect,select.minuteselect,select.secondselect,select.ampmselect",
          e.proxy(this.timeChanged, this)
        ),
      this.container
        .find(".ranges")
        .on("click.daterangepicker", "li", e.proxy(this.clickRange, this)),
      this.container
        .find(".drp-buttons")
        .on(
          "click.daterangepicker",
          "button.applyBtn",
          e.proxy(this.clickApply, this)
        )
        .on(
          "click.daterangepicker",
          "button.cancelBtn",
          e.proxy(this.clickCancel, this)
        ),
      this.element.is("input") || this.element.is("button")
        ? this.element.on({
            "click.daterangepicker": e.proxy(this.show, this),
            "focus.daterangepicker": e.proxy(this.show, this),
            "keyup.daterangepicker": e.proxy(this.elementChanged, this),
            "keydown.daterangepicker": e.proxy(this.keydown, this),
          })
        : (this.element.on("click.daterangepicker", e.proxy(this.toggle, this)),
          this.element.on(
            "keydown.daterangepicker",
            e.proxy(this.toggle, this)
          )),
      this.updateElement();
  };
  return (
    (s.prototype = {
      constructor: s,
      setcs_start_date: function (e) {
        "string" == typeof e && (this.cs_start_date = t(e, this.locale.format)),
          "object" == typeof e && (this.cs_start_date = t(e)),
          this.timePicker ||
            (this.cs_start_date = this.cs_start_date.startOf("day")),
          this.timePicker &&
            this.timePickerIncrement &&
            this.cs_start_date.minute(
              Math.round(
                this.cs_start_date.minute() / this.timePickerIncrement
              ) * this.timePickerIncrement
            ),
          this.minDate &&
            this.cs_start_date.isBefore(this.minDate) &&
            ((this.cs_start_date = this.minDate.clone()),
            this.timePicker &&
              this.timePickerIncrement &&
              this.cs_start_date.minute(
                Math.round(
                  this.cs_start_date.minute() / this.timePickerIncrement
                ) * this.timePickerIncrement
              )),
          this.maxDate &&
            this.cs_start_date.isAfter(this.maxDate) &&
            ((this.cs_start_date = this.maxDate.clone()),
            this.timePicker &&
              this.timePickerIncrement &&
              this.cs_start_date.minute(
                Math.floor(
                  this.cs_start_date.minute() / this.timePickerIncrement
                ) * this.timePickerIncrement
              )),
          this.isShowing || this.updateElement(),
          this.updateMonthsInView();
      },
      setcs_end_date: function (e) {
        "string" == typeof e && (this.cs_end_date = t(e, this.locale.format)),
          "object" == typeof e && (this.cs_end_date = t(e)),
          this.timePicker || (this.cs_end_date = this.cs_end_date.endOf("day")),
          this.timePicker &&
            this.timePickerIncrement &&
            this.cs_end_date.minute(
              Math.round(this.cs_end_date.minute() / this.timePickerIncrement) *
                this.timePickerIncrement
            ),
          this.cs_end_date.isBefore(this.cs_start_date) &&
            (this.cs_end_date = this.cs_start_date.clone()),
          this.maxDate &&
            this.cs_end_date.isAfter(this.maxDate) &&
            (this.cs_end_date = this.maxDate.clone()),
          this.maxSpan &&
            this.cs_start_date
              .clone()
              .add(this.maxSpan)
              .isBefore(this.cs_end_date) &&
            (this.cs_end_date = this.cs_start_date.clone().add(this.maxSpan)),
          (this.previousRightTime = this.cs_end_date.clone()),
          this.container
            .find(".drp-selected")
            .html(
              this.cs_start_date.format(this.locale.format) +
                this.locale.separator +
                this.cs_end_date.format(this.locale.format)
            ),
          this.isShowing || this.updateElement(),
          this.updateMonthsInView();
      },
      isInvalidDate: function () {
        return !1;
      },
      isCustomDate: function () {
        return !1;
      },
      updateView: function () {
        this.timePicker &&
          (this.renderTimePicker("left"),
          this.renderTimePicker("right"),
          this.cs_end_date
            ? this.container
                .find(".right .calendar-time select")
                .prop("disabled", !1)
                .removeClass("disabled")
            : this.container
                .find(".right .calendar-time select")
                .prop("disabled", !0)
                .addClass("disabled")),
          this.cs_end_date &&
            this.container
              .find(".drp-selected")
              .html(
                this.cs_start_date.format(this.locale.format) +
                  this.locale.separator +
                  this.cs_end_date.format(this.locale.format)
              ),
          this.updateMonthsInView(),
          this.updateCalendars(),
          this.updateFormInputs();
      },
      updateMonthsInView: function () {
        if (this.cs_end_date) {
          if (
            !this.singleDatePicker &&
            this.leftCalendar.month &&
            this.rightCalendar.month &&
            (this.cs_start_date.format("YYYY-MM") ==
              this.leftCalendar.month.format("YYYY-MM") ||
              this.cs_start_date.format("YYYY-MM") ==
                this.rightCalendar.month.format("YYYY-MM")) &&
            (this.cs_end_date.format("YYYY-MM") ==
              this.leftCalendar.month.format("YYYY-MM") ||
              this.cs_end_date.format("YYYY-MM") ==
                this.rightCalendar.month.format("YYYY-MM"))
          )
            return;
          (this.leftCalendar.month = this.cs_start_date.clone().date(2)),
            this.linkedCalendars ||
            (this.cs_end_date.month() == this.cs_start_date.month() &&
              this.cs_end_date.year() == this.cs_start_date.year())
              ? (this.rightCalendar.month = this.cs_start_date
                  .clone()
                  .date(2)
                  .add(1, "month"))
              : (this.rightCalendar.month = this.cs_end_date.clone().date(2));
        } else
          this.leftCalendar.month.format("YYYY-MM") !=
            this.cs_start_date.format("YYYY-MM") &&
            this.rightCalendar.month.format("YYYY-MM") !=
              this.cs_start_date.format("YYYY-MM") &&
            ((this.leftCalendar.month = this.cs_start_date.clone().date(2)),
            (this.rightCalendar.month = this.cs_start_date
              .clone()
              .date(2)
              .add(1, "month")));
        this.maxDate &&
          this.linkedCalendars &&
          !this.singleDatePicker &&
          this.rightCalendar.month > this.maxDate &&
          ((this.rightCalendar.month = this.maxDate.clone().date(2)),
          (this.leftCalendar.month = this.maxDate
            .clone()
            .date(2)
            .subtract(1, "month")));
      },
      updateCalendars: function () {
        if (this.timePicker) {
          var t, e, s, a;
          this.cs_end_date
            ? ((t = parseInt(
                this.container.find(".left .hourselect").val(),
                10
              )),
              isNaN(
                (e = parseInt(
                  this.container.find(".left .minuteselect").val(),
                  10
                ))
              ) &&
                (e = parseInt(
                  this.container.find(".left .minuteselect option:last").val(),
                  10
                )),
              (s = this.timePickerSeconds
                ? parseInt(this.container.find(".left .secondselect").val(), 10)
                : 0),
              this.timePicker24Hour ||
                ("PM" ===
                  (a = this.container.find(".left .ampmselect").val()) &&
                  t < 12 &&
                  (t += 12),
                "AM" !== a || 12 !== t || (t = 0)))
            : ((t = parseInt(
                this.container.find(".right .hourselect").val(),
                10
              )),
              isNaN(
                (e = parseInt(
                  this.container.find(".right .minuteselect").val(),
                  10
                ))
              ) &&
                (e = parseInt(
                  this.container.find(".right .minuteselect option:last").val(),
                  10
                )),
              (s = this.timePickerSeconds
                ? parseInt(
                    this.container.find(".right .secondselect").val(),
                    10
                  )
                : 0),
              this.timePicker24Hour ||
                ("PM" ===
                  (a = this.container.find(".right .ampmselect").val()) &&
                  t < 12 &&
                  (t += 12),
                "AM" !== a || 12 !== t || (t = 0))),
            this.leftCalendar.month.hour(t).minute(e).second(s),
            this.rightCalendar.month.hour(t).minute(e).second(s);
        }
        this.renderCalendar("left"),
          this.renderCalendar("right"),
          this.container.find(".ranges li").removeClass("active"),
          null != this.cs_end_date && this.calculateChosenLabel();
      },
      renderCalendar: function (s) {
        var a,
          i = (a =
            "left" == s ? this.leftCalendar : this.rightCalendar).month.month(),
          n = a.month.year(),
          r = a.month.hour(),
          o = a.month.minute(),
          h = a.month.second(),
          l = t([n, i]).daysInMonth(),
          c = t([n, i, 1]),
          d = t([n, i, l]),
          m = t(c).subtract(1, "month").month(),
          f = t(c).subtract(1, "month").year(),
          p = t([f, m]).daysInMonth(),
          u = c.day();
        ((a = []).firstDay = c), (a.lastDay = d);
        for (var g = 0; g < 6; g++) a[g] = [];
        var y = p - u + this.locale.firstDay + 1;
        y > p && (y -= 7), u == this.locale.firstDay && (y = p - 6);
        for (
          var k = t([f, m, y, 12, o, h]), b = ((g = 0), 0), C = 0;
          g < 42;
          g++, b++, k = t(k).add(24, "hour")
        )
          g > 0 && b % 7 == 0 && ((b = 0), C++),
            (a[C][b] = k.clone().hour(r).minute(o).second(h)),
            k.hour(12),
            this.minDate &&
              a[C][b].format("YYYY-MM-DD") ==
                this.minDate.format("YYYY-MM-DD") &&
              a[C][b].isBefore(this.minDate) &&
              "left" == s &&
              (a[C][b] = this.minDate.clone()),
            this.maxDate &&
              a[C][b].format("YYYY-MM-DD") ==
                this.maxDate.format("YYYY-MM-DD") &&
              a[C][b].isAfter(this.maxDate) &&
              "right" == s &&
              (a[C][b] = this.maxDate.clone());
        "left" == s
          ? (this.leftCalendar.calendar = a)
          : (this.rightCalendar.calendar = a);
        var v = "left" == s ? this.minDate : this.cs_start_date,
          D = this.maxDate,
          Y =
            ("left" == s ? this.cs_start_date : this.cs_end_date,
            this.locale.direction,
            '<table class="table-condensed">');
        (Y += "<thead>"),
          (Y += "<tr>"),
          (this.showWeekNumbers || this.showISOWeekNumbers) &&
            (Y += "<th></th>"),
          (v && !v.isBefore(a.firstDay)) ||
          (this.linkedCalendars && "left" != s)
            ? (Y += "<th></th>")
            : (Y += '<th class="prev available"><span></span></th>');
        var _ =
          this.locale.monthNames[a[1][1].month()] + a[1][1].format(" YYYY");
        if (this.showDropdowns) {
          for (
            var $ = a[1][1].month(),
              P = a[1][1].year(),
              w = (D && D.year()) || this.maxYear,
              x = (v && v.year()) || this.minYear,
              M = P == x,
              S = P == w,
              B = '<select class="monthselect">',
              I = 0;
            I < 12;
            I++
          )
            (!M || (v && I >= v.month())) && (!S || (D && I <= D.month()))
              ? (B +=
                  "<option value='" +
                  I +
                  "'" +
                  (I === $ ? " selected='selected'" : "") +
                  ">" +
                  this.locale.monthNames[I] +
                  "</option>")
              : (B +=
                  "<option value='" +
                  I +
                  "'" +
                  (I === $ ? " selected='selected'" : "") +
                  " disabled='disabled'>" +
                  this.locale.monthNames[I] +
                  "</option>");
          B += "</select>";
          for (var L = '<select class="yearselect">', A = x; A <= w; A++)
            L +=
              '<option value="' +
              A +
              '"' +
              (A === P ? ' selected="selected"' : "") +
              ">" +
              A +
              "</option>";
          _ = B + (L += "</select>");
        }
        if (
          ((Y += '<th colspan="5" class="month">' + _ + "</th>"),
          (D && !D.isAfter(a.lastDay)) ||
          (this.linkedCalendars && "right" != s && !this.singleDatePicker)
            ? (Y += "<th></th>")
            : (Y += '<th class="next available"><span></span></th>'),
          (Y += "</tr>"),
          (Y += "<tr>"),
          (this.showWeekNumbers || this.showISOWeekNumbers) &&
            (Y += '<th class="week">' + this.locale.weekLabel + "</th>"),
          e.each(this.locale.daysOfWeek, function (t, e) {
            Y += "<th>" + e + "</th>";
          }),
          (Y += "</tr>"),
          (Y += "</thead>"),
          (Y += "<tbody>"),
          null == this.cs_end_date && this.maxSpan)
        ) {
          var O = this.cs_start_date.clone().add(this.maxSpan).endOf("day");
          (D && !O.isBefore(D)) || (D = O);
        }
        for (C = 0; C < 6; C++) {
          for (
            Y += "<tr>",
              this.showWeekNumbers
                ? (Y += '<td class="week">' + a[C][0].week() + "</td>")
                : this.showISOWeekNumbers &&
                  (Y += '<td class="week">' + a[C][0].isoWeek() + "</td>"),
              b = 0;
            b < 7;
            b++
          ) {
            var W = [];
            a[C][b].isSame(new Date(), "day") && W.push("today"),
              a[C][b].isoWeekday() > 5 && W.push("weekend"),
              a[C][b].month() != a[1][1].month() && W.push("off", "ends"),
              this.minDate &&
                a[C][b].isBefore(this.minDate, "day") &&
                W.push("off", "disabled"),
              D && a[C][b].isAfter(D, "day") && W.push("off", "disabled"),
              this.isInvalidDate(a[C][b]) && W.push("off", "disabled"),
              a[C][b].format("YYYY-MM-DD") ==
                this.cs_start_date.format("YYYY-MM-DD") &&
                W.push("active", "start-date"),
              null != this.cs_end_date &&
                a[C][b].format("YYYY-MM-DD") ==
                  this.cs_end_date.format("YYYY-MM-DD") &&
                W.push("active", "end-date"),
              null != this.cs_end_date &&
                a[C][b] > this.cs_start_date &&
                a[C][b] < this.cs_end_date &&
                W.push("in-range");
            var H = this.isCustomDate(a[C][b]);
            !1 !== H &&
              ("string" == typeof H
                ? W.push(H)
                : Array.prototype.push.apply(W, H));
            var N = "",
              E = !1;
            for (g = 0; g < W.length; g++)
              (N += W[g] + " "), "disabled" == W[g] && (E = !0);
            E || (N += "available"),
              (Y +=
                '<td class="' +
                N.replace(/^\s+|\s+$/g, "") +
                '" data-title="r' +
                C +
                "c" +
                b +
                '">' +
                a[C][b].date() +
                "</td>");
          }
          Y += "</tr>";
        }
        (Y += "</tbody>"),
          (Y += "</table>"),
          this.container
            .find(".drp-calendar." + s + " .calendar-table")
            .html(Y);
      },
      renderTimePicker: function (t) {
        if ("right" != t || this.cs_end_date) {
          var e,
            s,
            a,
            i = this.maxDate;
          if (
            (this.maxSpan &&
              (!this.maxDate ||
                this.cs_start_date
                  .clone()
                  .add(this.maxSpan)
                  .isBefore(this.maxDate)) &&
              (i = this.cs_start_date.clone().add(this.maxSpan)),
            "left" == t)
          )
            (s = this.cs_start_date.clone()), (a = this.minDate);
          else if ("right" == t) {
            (s = this.cs_end_date.clone()), (a = this.cs_start_date);
            var n = this.container.find(".drp-calendar.right .calendar-time");
            if (
              "" != n.html() &&
              (s.hour(
                isNaN(s.hour())
                  ? n.find(".hourselect option:selected").val()
                  : s.hour()
              ),
              s.minute(
                isNaN(s.minute())
                  ? n.find(".minuteselect option:selected").val()
                  : s.minute()
              ),
              s.second(
                isNaN(s.second())
                  ? n.find(".secondselect option:selected").val()
                  : s.second()
              ),
              !this.timePicker24Hour)
            ) {
              var r = n.find(".ampmselect option:selected").val();
              "PM" === r && 12 > s.hour() && s.hour(s.hour() + 12),
                "AM" === r && 12 === s.hour() && s.hour(0);
            }
            s.isBefore(this.cs_start_date) && (s = this.cs_start_date.clone()),
              i && s.isAfter(i) && (s = i.clone());
          }
          e = '<select class="hourselect">';
          for (
            var o = this.timePicker24Hour ? 0 : 1,
              h = this.timePicker24Hour ? 23 : 12,
              l = o;
            l <= h;
            l++
          ) {
            var c = l;
            this.timePicker24Hour ||
              (c = s.hour() >= 12 ? (12 == l ? 12 : l + 12) : 12 == l ? 0 : l);
            var d = s.clone().hour(c),
              m = !1;
            a && d.minute(59).isBefore(a) && (m = !0),
              i && d.minute(0).isAfter(i) && (m = !0),
              c != s.hour() || m
                ? (e += m
                    ? '<option value="' +
                      l +
                      '" disabled="disabled" class="disabled">' +
                      l +
                      "</option>"
                    : '<option value="' + l + '">' + l + "</option>")
                : (e +=
                    '<option value="' +
                    l +
                    '" selected="selected">' +
                    l +
                    "</option>");
          }
          for (
            e += "</select> ", e += ': <select class="minuteselect">', l = 0;
            l < 60;
            l += this.timePickerIncrement
          ) {
            var f = l < 10 ? "0" + l : l;
            (d = s.clone().minute(l)),
              (m = !1),
              a && d.second(59).isBefore(a) && (m = !0),
              i && d.second(0).isAfter(i) && (m = !0),
              s.minute() != l || m
                ? (e += m
                    ? '<option value="' +
                      l +
                      '" disabled="disabled" class="disabled">' +
                      f +
                      "</option>"
                    : '<option value="' + l + '">' + f + "</option>")
                : (e +=
                    '<option value="' +
                    l +
                    '" selected="selected">' +
                    f +
                    "</option>");
          }
          if (((e += "</select> "), this.timePickerSeconds)) {
            for (e += ': <select class="secondselect">', l = 0; l < 60; l++)
              (f = l < 10 ? "0" + l : l),
                (d = s.clone().second(l)),
                (m = !1),
                a && d.isBefore(a) && (m = !0),
                i && d.isAfter(i) && (m = !0),
                s.second() != l || m
                  ? (e += m
                      ? '<option value="' +
                        l +
                        '" disabled="disabled" class="disabled">' +
                        f +
                        "</option>"
                      : '<option value="' + l + '">' + f + "</option>")
                  : (e +=
                      '<option value="' +
                      l +
                      '" selected="selected">' +
                      f +
                      "</option>");
            e += "</select> ";
          }
          if (!this.timePicker24Hour) {
            e += '<select class="ampmselect">';
            var p = "",
              u = "";
            a &&
              s.clone().hour(12).minute(0).second(0).isBefore(a) &&
              (p = ' disabled="disabled" class="disabled"'),
              i &&
                s.clone().hour(0).minute(0).second(0).isAfter(i) &&
                (u = ' disabled="disabled" class="disabled"'),
              s.hour() >= 12
                ? (e +=
                    '<option value="AM"' +
                    p +
                    '>AM</option><option value="PM" selected="selected"' +
                    u +
                    ">PM</option>")
                : (e +=
                    '<option value="AM" selected="selected"' +
                    p +
                    '>AM</option><option value="PM"' +
                    u +
                    ">PM</option>"),
              (e += "</select>");
          }
          this.container.find(".drp-calendar." + t + " .calendar-time").html(e);
        }
      },
      updateFormInputs: function () {
        this.singleDatePicker ||
        (this.cs_end_date &&
          (this.cs_start_date.isBefore(this.cs_end_date) ||
            this.cs_start_date.isSame(this.cs_end_date)))
          ? this.container.find("button.applyBtn").prop("disabled", !1)
          : this.container.find("button.applyBtn").prop("disabled", !0);
      },
      move: function () {
        var t,
          s,
          a = { top: 0, left: 0 },
          i = this.drops,
          n = e(window).width();
        switch (
          (this.parentEl.is("body") ||
            ((a = {
              top: this.parentEl.offset().top - this.parentEl.scrollTop(),
              left: this.parentEl.offset().left - this.parentEl.scrollLeft(),
            }),
            (n = this.parentEl[0].clientWidth + this.parentEl.offset().left)),
          i)
        ) {
          case "auto":
            (s =
              this.element.offset().top + this.element.outerHeight() - a.top) +
              this.container.outerHeight() >=
              this.parentEl[0].scrollHeight &&
              ((s =
                this.element.offset().top -
                this.container.outerHeight() -
                a.top),
              (i = "up"));
            break;
          case "up":
            s =
              this.element.offset().top - this.container.outerHeight() - a.top;
            break;
          default:
            s = this.element.offset().top + this.element.outerHeight() - a.top;
        }
        this.container.css({ top: 0, left: 0, right: "auto" });
        var r = this.container.outerWidth();
        if (
          (this.container.toggleClass("drop-up", "up" == i),
          "left" == this.opens)
        ) {
          var o = n - this.element.offset().left - this.element.outerWidth();
          r + o > e(window).width()
            ? this.container.css({ top: s, right: "auto", left: 9 })
            : this.container.css({ top: s, right: o, left: "auto" });
        } else
          "center" == this.opens
            ? (t =
                this.element.offset().left -
                a.left +
                this.element.outerWidth() / 2 -
                r / 2) < 0
              ? this.container.css({ top: s, right: "auto", left: 9 })
              : t + r > e(window).width()
              ? this.container.css({ top: s, left: "auto", right: 0 })
              : this.container.css({ top: s, left: t, right: "auto" })
            : (t = this.element.offset().left - a.left) + r > e(window).width()
            ? this.container.css({ top: s, left: "auto", right: 0 })
            : this.container.css({ top: s, left: t, right: "auto" });
      },
      show: function (t) {
        this.isShowing ||
          ((this._outsideClickProxy = e.proxy(function (t) {
            this.outsideClick(t);
          }, this)),
          e(document)
            .on("mousedown.daterangepicker", this._outsideClickProxy)
            .on("touchend.daterangepicker", this._outsideClickProxy)
            .on(
              "click.daterangepicker",
              "[data-toggle=dropdown]",
              this._outsideClickProxy
            )
            .on("focusin.daterangepicker", this._outsideClickProxy),
          e(window).on(
            "resize.daterangepicker",
            e.proxy(function (t) {
              this.move(t);
            }, this)
          ),
          (this.oldcs_start_date = this.cs_start_date.clone()),
          (this.oldcs_end_date = this.cs_end_date.clone()),
          (this.previousRightTime = this.cs_end_date.clone()),
          this.updateView(),
          this.container.show(),
          this.move(),
          this.element.trigger("show.daterangepicker", this),
          (this.isShowing = !0));
      },
      hide: function (t) {
        this.isShowing &&
          (this.cs_end_date ||
            ((this.cs_start_date = this.oldcs_start_date.clone()),
            (this.cs_end_date = this.oldcs_end_date.clone())),
          (this.cs_start_date.isSame(this.oldcs_start_date) &&
            this.cs_end_date.isSame(this.oldcs_end_date)) ||
            this.callback(
              this.cs_start_date.clone(),
              this.cs_end_date.clone(),
              this.chosenLabel
            ),
          this.updateElement(),
          e(document).off(".daterangepicker"),
          e(window).off(".daterangepicker"),
          this.container.hide(),
          this.element.trigger("hide.daterangepicker", this),
          (this.isShowing = !1));
      },
      toggle: function (t) {
        this.isShowing ? this.hide() : this.show();
      },
      outsideClick: function (t) {
        var s = e(t.target);
        "focusin" == t.type ||
          s.closest(this.element).length ||
          s.closest(this.container).length ||
          s.closest(".calendar-table").length ||
          (this.hide(),
          this.element.trigger("outsideClick.daterangepicker", this));
      },
      showCalendars: function () {
        this.container.addClass("show-calendar"),
          this.move(),
          this.element.trigger("showCalendar.daterangepicker", this);
      },
      hideCalendars: function () {
        this.container.removeClass("show-calendar"),
          this.element.trigger("hideCalendar.daterangepicker", this);
      },
      clickRange: function (t) {
        var e = t.target.getAttribute("data-range-key");
        if (((this.chosenLabel = e), e == this.locale.customRangeLabel))
          this.showCalendars();
        else {
          var s = this.ranges[e];
          (this.cs_start_date = s[0]),
            (this.cs_end_date = s[1]),
            this.timePicker ||
              (this.cs_start_date.startOf("day"),
              this.cs_end_date.endOf("day")),
            this.alwaysShowCalendars || this.hideCalendars(),
            this.clickApply();
        }
      },
      clickPrev: function (t) {
        e(t.target).parents(".drp-calendar").hasClass("left")
          ? (this.leftCalendar.month.subtract(1, "month"),
            this.linkedCalendars &&
              this.rightCalendar.month.subtract(1, "month"))
          : this.rightCalendar.month.subtract(1, "month"),
          this.updateCalendars();
      },
      clickNext: function (t) {
        e(t.target).parents(".drp-calendar").hasClass("left")
          ? this.leftCalendar.month.add(1, "month")
          : (this.rightCalendar.month.add(1, "month"),
            this.linkedCalendars && this.leftCalendar.month.add(1, "month")),
          this.updateCalendars();
      },
      hoverDate: function (t) {
        if (e(t.target).hasClass("available")) {
          var s = e(t.target).attr("data-title"),
            a = s.substr(1, 1),
            i = s.substr(3, 1),
            n = e(t.target).parents(".drp-calendar").hasClass("left")
              ? this.leftCalendar.calendar[a][i]
              : this.rightCalendar.calendar[a][i],
            r = this.leftCalendar,
            o = this.rightCalendar,
            h = this.cs_start_date;
          this.cs_end_date ||
            this.container.find(".drp-calendar tbody td").each(function (t, s) {
              if (!e(s).hasClass("week")) {
                var a = e(s).attr("data-title"),
                  i = a.substr(1, 1),
                  l = a.substr(3, 1),
                  c = e(s).parents(".drp-calendar").hasClass("left")
                    ? r.calendar[i][l]
                    : o.calendar[i][l];
                (c.isAfter(h) && c.isBefore(n)) || c.isSame(n, "day")
                  ? e(s).addClass("in-range")
                  : e(s).removeClass("in-range");
              }
            });
        }
      },
      clickDate: function (t) {
        if (e(t.target).hasClass("available")) {
          var s,
            a = e(t.target).attr("data-title"),
            i = a.substr(1, 1),
            n = a.substr(3, 1),
            r = e(t.target).parents(".drp-calendar").hasClass("left")
              ? this.leftCalendar.calendar[i][n]
              : this.rightCalendar.calendar[i][n];
          if (this.cs_end_date || r.isBefore(this.cs_start_date, "day")) {
            if (this.timePicker) {
              var o = parseInt(
                this.container.find(".left .hourselect").val(),
                10
              );
              this.timePicker24Hour ||
                ("PM" ===
                  (s = this.container.find(".left .ampmselect").val()) &&
                  o < 12 &&
                  (o += 12),
                "AM" !== s || 12 !== o || (o = 0));
              var h = parseInt(
                this.container.find(".left .minuteselect").val(),
                10
              );
              isNaN(h) &&
                (h = parseInt(
                  this.container.find(".left .minuteselect option:last").val(),
                  10
                ));
              var l = this.timePickerSeconds
                ? parseInt(this.container.find(".left .secondselect").val(), 10)
                : 0;
              r = r.clone().hour(o).minute(h).second(l);
            }
            (this.cs_end_date = null), this.setcs_start_date(r.clone());
          } else
            !this.cs_end_date && r.isBefore(this.cs_start_date)
              ? this.setcs_end_date(this.cs_start_date.clone())
              : (this.timePicker &&
                  ((o = parseInt(
                    this.container.find(".right .hourselect").val(),
                    10
                  )),
                  this.timePicker24Hour ||
                    ("PM" ===
                      (s = this.container.find(".right .ampmselect").val()) &&
                      o < 12 &&
                      (o += 12),
                    "AM" !== s || 12 !== o || (o = 0)),
                  isNaN(
                    (h = parseInt(
                      this.container.find(".right .minuteselect").val(),
                      10
                    ))
                  ) &&
                    (h = parseInt(
                      this.container
                        .find(".right .minuteselect option:last")
                        .val(),
                      10
                    )),
                  (l = this.timePickerSeconds
                    ? parseInt(
                        this.container.find(".right .secondselect").val(),
                        10
                      )
                    : 0),
                  (r = r.clone().hour(o).minute(h).second(l))),
                this.setcs_end_date(r.clone()),
                this.autoApply &&
                  (this.calculateChosenLabel(), this.clickApply()));
          this.singleDatePicker &&
            (this.setcs_end_date(this.cs_start_date),
            !this.timePicker && this.autoApply && this.clickApply()),
            this.updateView(),
            t.stopPropagation();
        }
      },
      calculateChosenLabel: function () {
        var t = !0,
          e = 0;
        for (var s in this.ranges) {
          if (this.timePicker) {
            var a = this.timePickerSeconds
              ? "YYYY-MM-DD HH:mm:ss"
              : "YYYY-MM-DD HH:mm";
            if (
              this.cs_start_date.format(a) == this.ranges[s][0].format(a) &&
              this.cs_end_date.format(a) == this.ranges[s][1].format(a)
            ) {
              (t = !1),
                (this.chosenLabel = this.container
                  .find(".ranges li:eq(" + e + ")")
                  .addClass("active")
                  .attr("data-range-key"));
              break;
            }
          } else if (
            this.cs_start_date.format("YYYY-MM-DD") ==
              this.ranges[s][0].format("YYYY-MM-DD") &&
            this.cs_end_date.format("YYYY-MM-DD") ==
              this.ranges[s][1].format("YYYY-MM-DD")
          ) {
            (t = !1),
              (this.chosenLabel = this.container
                .find(".ranges li:eq(" + e + ")")
                .addClass("active")
                .attr("data-range-key"));
            break;
          }
          e++;
        }
        t &&
          (this.showCustomRangeLabel
            ? (this.chosenLabel = this.container
                .find(".ranges li:last")
                .addClass("active")
                .attr("data-range-key"))
            : (this.chosenLabel = null),
          this.showCalendars());
      },
      clickApply: function (t) {
        this.hide(), this.element.trigger("apply.daterangepicker", this);
      },
      clickCancel: function (t) {
        (this.cs_start_date = this.oldcs_start_date),
          (this.cs_end_date = this.oldcs_end_date),
          this.hide(),
          this.element.trigger("cancel.daterangepicker", this);
      },
      monthOrYearChanged: function (t) {
        var s = e(t.target).closest(".drp-calendar").hasClass("left"),
          a = this.container.find(".drp-calendar." + (s ? "left" : "right")),
          i = parseInt(a.find(".monthselect").val(), 10),
          n = a.find(".yearselect").val();
        s ||
          ((n < this.cs_start_date.year() ||
            (n == this.cs_start_date.year() &&
              i < this.cs_start_date.month())) &&
            ((i = this.cs_start_date.month()),
            (n = this.cs_start_date.year()))),
          this.minDate &&
            (n < this.minDate.year() ||
              (n == this.minDate.year() && i < this.minDate.month())) &&
            ((i = this.minDate.month()), (n = this.minDate.year())),
          this.maxDate &&
            (n > this.maxDate.year() ||
              (n == this.maxDate.year() && i > this.maxDate.month())) &&
            ((i = this.maxDate.month()), (n = this.maxDate.year())),
          s
            ? (this.leftCalendar.month.month(i).year(n),
              this.linkedCalendars &&
                (this.rightCalendar.month = this.leftCalendar.month
                  .clone()
                  .add(1, "month")))
            : (this.rightCalendar.month.month(i).year(n),
              this.linkedCalendars &&
                (this.leftCalendar.month = this.rightCalendar.month
                  .clone()
                  .subtract(1, "month"))),
          this.updateCalendars();
      },
      timeChanged: function (t) {
        var s = e(t.target).closest(".drp-calendar"),
          a = s.hasClass("left"),
          i = parseInt(s.find(".hourselect").val(), 10),
          n = parseInt(s.find(".minuteselect").val(), 10);
        isNaN(n) &&
          (n = parseInt(s.find(".minuteselect option:last").val(), 10));
        var r = this.timePickerSeconds
          ? parseInt(s.find(".secondselect").val(), 10)
          : 0;
        if (!this.timePicker24Hour) {
          var o = s.find(".ampmselect").val();
          "PM" === o && i < 12 && (i += 12), "AM" === o && 12 === i && (i = 0);
        }
        if (a) {
          var h = this.cs_start_date.clone();
          h.hour(i),
            h.minute(n),
            h.second(r),
            this.setcs_start_date(h),
            this.singleDatePicker
              ? (this.cs_end_date = this.cs_start_date.clone())
              : this.cs_end_date &&
                this.cs_end_date.format("YYYY-MM-DD") ==
                  h.format("YYYY-MM-DD") &&
                this.cs_end_date.isBefore(h) &&
                this.setcs_end_date(h.clone());
        } else if (this.cs_end_date) {
          var l = this.cs_end_date.clone();
          l.hour(i), l.minute(n), l.second(r), this.setcs_end_date(l);
        }
        this.updateCalendars(),
          this.updateFormInputs(),
          this.renderTimePicker("left"),
          this.renderTimePicker("right");
      },
      elementChanged: function () {
        if (this.element.is("input") && this.element.val().length) {
          var e = this.element.val().split(this.locale.separator),
            s = null,
            a = null;
          2 === e.length &&
            ((s = t(e[0], this.locale.format)),
            (a = t(e[1], this.locale.format))),
            (this.singleDatePicker || null === s || null === a) &&
              (a = s = t(this.element.val(), this.locale.format)),
            s.isValid() &&
              a.isValid() &&
              (this.setcs_start_date(s),
              this.setcs_end_date(a),
              this.updateView());
        }
      },
      keydown: function (t) {
        (9 !== t.keyCode && 13 !== t.keyCode) || this.hide(),
          27 === t.keyCode &&
            (t.preventDefault(), t.stopPropagation(), this.hide());
      },
      updateElement: function () {
        if (this.element.is("input") && this.autoUpdateInput) {
          var t = this.cs_start_date.format(this.locale.format);
          this.singleDatePicker ||
            (t +=
              this.locale.separator +
              this.cs_end_date.format(this.locale.format)),
            t !== this.element.val() && this.element.val(t).trigger("change");
        }
      },
      remove: function () {
        this.container.remove(),
          this.element.off(".daterangepicker"),
          this.element.removeData();
      },
    }),
    (e.fn.daterangepicker = function (t, a) {
      var i = e.extend(!0, {}, e.fn.daterangepicker.defaultOptions, t);
      return (
        this.each(function () {
          var t = e(this);
          t.data("daterangepicker") && t.data("daterangepicker").remove(),
            t.data("daterangepicker", new s(t, i, a));
        }),
        this
      );
    }),
    s
  );
});
